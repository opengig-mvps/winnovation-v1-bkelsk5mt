
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
      
model User {
  id                     Int       @id @default(autoincrement())
  email                  String    @unique
  phone                  String?   @unique
  password               String?
  username               String    @unique
  name                   String?
  role                   String    @default("user")
  isVerified             Boolean   @default(false)
  verificationToken      String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  expertProfile          ExpertProfile?
  bookings               Booking[]
  payments               Payment[]
  communications         Communication[]
}

model ExpertProfile {
  id                     Int       @id @default(autoincrement())
  userId                 Int       @unique
  role                   String
  company                String
  certifications         String?
  yearsOfExperience      Int
  expertiseAreas         String?
  isVerified             Boolean   @default(false)
  verificationDocuments  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  user                   User      @relation(fields: [userId], references: [id])
  ratings                Rating[]
  schedules              Schedule[]
}

model Booking {
  id                     Int       @id @default(autoincrement())
  userId                 Int
  expertId               Int
  scheduleId             Int
  bookingDate            DateTime  @default(now())
  status                 String    @default("pending")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  user                   User      @relation(fields: [userId], references: [id])
  expert                 ExpertProfile @relation(fields: [expertId], references: [id])
  schedule               Schedule  @relation(fields: [scheduleId], references: [id])
}

model Schedule {
  id                     Int       @id @default(autoincrement())
  expertId               Int
  availableSlots         Json
  timeZone               String
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  expert                 ExpertProfile @relation(fields: [expertId], references: [id])
  bookings               Booking[]
}

model Payment {
  id                     Int       @id @default(autoincrement())
  userId                 Int
  amount                 Float
  paymentMethod          String
  paymentStatus          String
  transactionDate        DateTime  @default(now())
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  user                   User      @relation(fields: [userId], references: [id])
}

model Communication {
  id                     Int       @id @default(autoincrement())
  userId                 Int
  expertId               Int
  callType               String
  callDate               DateTime  @default(now())
  callDuration           Int?
  recordingUrl           String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  user                   User      @relation(fields: [userId], references: [id])
  expert                 ExpertProfile @relation(fields: [expertId], references: [id])
}

model Rating {
  id                     Int       @id @default(autoincrement())
  expertId               Int
  userId                 Int
  rating                 Float
  review                 String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  expert                 ExpertProfile @relation(fields: [expertId], references: [id])
  user                   User      @relation(fields: [userId], references: [id])

  @@unique([expertId, userId])
}